/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_signedbytes_free(a: number): void;
export function signedbytes_new(a: number, b: number, c: number, d: number): number;
export function signedbytes_publicKey(a: number): number;
export function signedbytes_content(a: number, b: number): void;
export function signedbytes_signature(a: number): number;
export function signedbytes_validate(a: number): number;
export function __wbg_signedjson_free(a: number): void;
export function signedjson_new(a: number, b: number, c: number): number;
export function signedjson_publicKey(a: number): number;
export function signedjson_content(a: number): number;
export function signedjson_signature(a: number): number;
export function signedjson_validate(a: number): number;
export function signedjson_validateWithKeyId(a: number, b: number): number;
export function signedjson_validateWithDidDoc(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function __wbg_validationissue_free(a: number): void;
export function validationissue_code(a: number): number;
export function validationissue_severity(a: number, b: number): void;
export function validationissue_reason(a: number, b: number): void;
export function __wbg_validationresult_free(a: number): void;
export function validationresult_status(a: number, b: number): void;
export function validationresult_messages(a: number, b: number): void;
export function __wbg_did_free(a: number): void;
export function did_new(a: number, b: number): number;
export function did_prefix(a: number): void;
export function did_fromKeyId(a: number): number;
export function did_defaultKeyId(a: number): number;
export function did_toString(a: number, b: number): void;
export function mask(a: number, b: number, c: number, d: number): void;
export function digest(a: number, b: number): void;
export function __wbg_vault_free(a: number): void;
export function vault_new(a: number, b: number): number;
export function vault_serialize(a: number, b: number): void;
export function vault_deserialize(a: number, b: number): number;
export function vault_keyIds(a: number, b: number): void;
export function vault_dids(a: number, b: number): void;
export function vault_activeDid(a: number): number;
export function vault_createDid(a: number): number;
export function vault_signWitnessRequest(a: number, b: number, c: number): number;
export function vault_signWitnessStatement(a: number, b: number, c: number): number;
export function vault_signClaimPresentation(a: number, b: number, c: number): number;
export function vault_signDidOperations(a: number, b: number, c: number, d: number): number;
export function bip44_network(a: number, b: number, c: number): number;
export function bip44coin_account(a: number, b: number): number;
export function bip44coin_to_xprv(a: number, b: number): void;
export function __wbg_bip44account_free(a: number): void;
export function bip44account_node(a: number): number;
export function bip44account_chain(a: number, b: number): number;
export function bip44account_key(a: number, b: number): number;
export function bip44account_bip32_path(a: number, b: number): void;
export function bip44account_neuter(a: number): number;
export function bip44account_fromXprv(a: number, b: number, c: number, d: number, e: number): number;
export function bip44account_to_xprv(a: number, b: number): void;
export function __wbg_bip44publicaccount_free(a: number): void;
export function bip44publicaccount_node(a: number): number;
export function bip44publicaccount_chain(a: number, b: number): number;
export function bip44publicaccount_key(a: number, b: number): number;
export function bip44publicaccount_fromXpub(a: number, b: number, c: number, d: number, e: number): number;
export function bip44publicaccount_to_xpub(a: number, b: number): void;
export function bip44subaccount_key(a: number, b: number): number;
export function bip44subaccount_fromXprv(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function bip44subaccount_to_xprv(a: number, b: number): void;
export function bip44publicsubaccount_key(a: number, b: number): number;
export function bip44publicsubaccount_fromXpub(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function bip44publicsubaccount_to_xpub(a: number, b: number): void;
export function bip44key_privateKey(a: number): number;
export function bip44key_to_wif(a: number, b: number): void;
export function bip44publickey_publicKey(a: number): number;
export function bip44publickey_keyId(a: number): number;
export function bip44publickey_to_p2pkh_addr(a: number, b: number): void;
export function __wbg_bip44_free(a: number): void;
export function bip44coin_bip32_path(a: number, b: number): void;
export function bip44publicaccount_bip32_path(a: number, b: number): void;
export function bip44subaccount_bip32_path(a: number, b: number): void;
export function bip44publicsubaccount_bip32_path(a: number, b: number): void;
export function bip44key_bip32_path(a: number, b: number): void;
export function bip44publickey_bip32_path(a: number, b: number): void;
export function __wbg_bip44coin_free(a: number): void;
export function __wbg_bip44subaccount_free(a: number): void;
export function __wbg_bip44key_free(a: number): void;
export function bip44coin_node(a: number): number;
export function bip44subaccount_node(a: number): number;
export function bip44key_node(a: number): number;
export function bip44subaccount_neuter(a: number): number;
export function bip44key_neuter(a: number): number;
export function bip44publicsubaccount_node(a: number): number;
export function bip44publickey_node(a: number): number;
export function __wbg_bip44publicsubaccount_free(a: number): void;
export function __wbg_bip44publickey_free(a: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_new(a: number, b: number): number;
export function signature_fromSecp(a: number): number;
export function signature_prefix(a: number): void;
export function signature_toString(a: number, b: number): void;
export function __wbg_secpsignature_free(a: number): void;
export function secpsignature_fromDer(a: number, b: number): number;
export function secpsignature_toDer(a: number, b: number): void;
export function secpsignature_toString(a: number, b: number): void;
export function __wbg_keyid_free(a: number): void;
export function keyid_new(a: number, b: number): number;
export function keyid_fromSecp(a: number): number;
export function keyid_prefix(a: number): void;
export function keyid_toString(a: number, b: number): void;
export function __wbg_secpkeyid_free(a: number): void;
export function __wbg_seed_free(a: number): void;
export function seed_new(a: number, b: number): number;
export function seed_toBytes(a: number, b: number): void;
export function jsbip32_master(a: number, b: number, c: number): number;
export function __wbg_bip32node_free(a: number): void;
export function bip32node_path(a: number, b: number): void;
export function bip32node_deriveNormal(a: number, b: number): number;
export function bip32node_deriveHardened(a: number, b: number): number;
export function bip32node_privateKey(a: number): number;
export function bip32node_neuter(a: number): number;
export function bip32node_to_xprv(a: number, b: number): void;
export function bip32node_to_wif(a: number, b: number): void;
export function __wbg_bip32publicnode_free(a: number): void;
export function bip32publicnode_deriveNormal(a: number, b: number): number;
export function bip32publicnode_publicKey(a: number): number;
export function bip32publicnode_keyId(a: number): number;
export function bip32publicnode_to_xpub(a: number, b: number): void;
export function bip32publicnode_to_p2pkh_addr(a: number, b: number): void;
export function __wbg_bip32_free(a: number): void;
export function bip32publicnode_path(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_new(a: number, b: number): number;
export function publickey_fromSecp(a: number): number;
export function publickey_prefix(a: number): void;
export function publickey_keyId(a: number): number;
export function publickey_validateId(a: number, b: number): number;
export function publickey_validateEcdsa(a: number, b: number, c: number, d: number): number;
export function publickey_toString(a: number, b: number): void;
export function __wbg_secppublickey_free(a: number): void;
export function secppublickey_new(a: number, b: number): number;
export function secppublickey_keyId(a: number): number;
export function secppublickey_validateId(a: number, b: number): number;
export function secppublickey_validateEcdsa(a: number, b: number, c: number, d: number): number;
export function secppublickey_toString(a: number, b: number): void;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_fromSecp(a: number): number;
export function privatekey_publicKey(a: number): number;
export function privatekey_validateEcdsa(a: number, b: number, c: number): number;
export function __wbg_secpprivatekey_free(a: number): void;
export function secpprivatekey_fromArkPassphrase(a: number, b: number): number;
export function secpprivatekey_toWif(a: number, b: number, c: number, d: number): void;
export function secpprivatekey_publicKey(a: number): number;
export function secpprivatekey_signEcdsa(a: number, b: number, c: number): number;
export function __wbg_bip39_free(a: number): void;
export function bip39_new(a: number, b: number): number;
export function bip39_entropy(a: number, b: number, c: number): number;
export function bip39_validatePhrase(a: number, b: number, c: number): void;
export function bip39_listWords(a: number, b: number, c: number, d: number): void;
export function bip39_phrase(a: number, b: number, c: number): number;
export function __wbg_bip39phrase_free(a: number): void;
export function bip39phrase_password(a: number, b: number, c: number): number;
export function bip39phrase_phrase(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
